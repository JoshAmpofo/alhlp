Test of 7-base_geometry Module
=================================

Usage:
=====

Testing for module importing:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testing for module documentation:
	>>> mstr = __import__('7-base_geometry').__doc__
	>>> len(mstr) > 1
	True

Testing for class docstring:
	>>> cstr = __import__('7-base_geometry').BaseGeometry.__doc__
	>>> len(cstr) > 1
	True

Testing for method docstring:
	>>> mdstr = __import__('7-base_geometry').BaseGeometry.area.__doc__
	>>> len(mdstr) > 1
	True
	>>> mdstr_2 = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
	>>> len(mdstr_2) > 1
	True

Testing for area implementation:
	>>> bg = BaseGeometry()
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Testing for supplying string for value argument:
	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

Testing for supplying zero to value argument:
	>>> bg.integer_validator("value", 0)
	Traceback (most recent call last):
	...
	ValueError: value must be greater than 0

Testing for supplying negative to value argument:
	>>> bg.integer_validator("value", -1)
	Traceback (most recent call last):
	...
	ValueError: value must be greater than 0

Testing for supplying non-type values to value argument:
	>>> bg.integer_validator("bool", True)
	Traceback (most recent call last):
	...
	TypeError: bool must be an integer
	>>> bg.integer_validator("bool", False)
	Traceback (most recent call last):
	...
	TypeError: bool must be an integer
	>>> bg.integer_validator("set", {1, 2})
	Traceback (most recent call last):
	...
	TypeError: set must be an integer
	>>> bg.integer_validator("dict", {"key":"value"})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer
	>>> bg.integer_validator("float", 12.5)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer
	>>> bg.integer_validator("list", [2,4,6])
	Traceback (most recent call last):
	...
	TypeError: list must be an integer
	>>> bg.integer_validator("tuple", (1, 2))
	Traceback (most recent call last):
	...
	TypeError: tuple must be an integer

Testing for supplying no arguments:
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing for supplying only one argument:
	>>> bg.integer_validator("name")
	Traceback (most recent call last):
	...
	TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Testing for supplying multiple arguments:
	>>> bg.integer_validator("name", "value", "third wheel")
	Traceback (most recent call last):
	...
	TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
